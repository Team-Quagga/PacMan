#version 330

in vec3 color;
in vec2 texCoord;
in vec3 normal;
in vec3 light;
in vec3 vertex;


out vec4 outputColor;

uniform mat4 worldMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

uniform sampler2D tex;

void main(void)
{
	//=========================

	//Per pixel lighting
	//Normal matrix - only rotation part
	mat3 normalMatrix = transpose(mat3(worldMatrix));
	vec3 normal = normalize(normalMatrix * normal);

	//Pixel position in 3D space
	vec3 pixelPosition = vec3(worldMatrix * vec4(vertex, 1));
	vec3 surfaceToLight = light - pixelPosition; //distance from the lights source to our pixel


	float intensity = dot(normal, surfaceToLight) / length(surfaceToLight);


	//=========================

	outputColor = vec4(color, 1.0) * intensity;
}